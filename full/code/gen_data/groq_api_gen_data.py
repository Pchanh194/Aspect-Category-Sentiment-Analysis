import requests
import json
import os
from typing import List, Dict, Any

# Set up Groq API key
GROQ_API_KEY = 'YOUR_TOKEN_HERE' # Thay th·∫ø b·∫±ng API key th·ª±c c·ªßa b·∫°n

def generate_absa_data(num_samples: int, tag_labels: List[str]) -> List[Dict[str, Any]]:
    prompt = f"""
    Please create a dataset for Aspect-Based Sentiment Analysis (ABSA) in Vietnamese, following the format below:
    ```json
    {{"text": "<Vietnamese text>", "labels": [[<start_position>, <end_position>, "<TAG>"]]}}
    ```
    **Requirements:**
    - **text**: A Vietnamese sentence or paragraph that reflects a user's opinion about a smartphone product or service.
    - **labels**: A list of labels, each label includes:
      - **start_position**: The character index where the aspect term starts.
      - **end_position**: The character index where the aspect term ends.
      - **TAG**: A label in the format "ASPECT#SENTIMENT", for example: "GENERAL#POSITIVE".
    Use the following tag labels: {tag_labels}.
    **Examples:**
    ```jsonl
    {{"text": "B·∫Øt s√≥ng qu√° y·∫øu k n·ªïi 1 v·∫°ch4g Viettel ch·ªâ 1 v·∫°ch ƒë·ª©ng d∆∞·ªõi c·ªôt ph√°t s√≥ng v·∫´n b·∫Øt y·∫øu", "labels": [[0, 86, "FEATURES#NEGATIVE"]]}}
    {{"text": "M√°y ƒë·∫πp c·∫•u h√¨nh ngon.. s·∫°c r·∫•t nhanh... ∆Øng nh·∫•t c√°i camera l√™n ·∫£nh ƒë·∫πp th√¥i r... M·ªü kho√° v√¢n tay c·ª±c nh·∫≠y.. ƒë√∫ng ki·ªÉu ngon-b·ªï-r·∫ª", "labels": [[0, 7, "DESIGN#POSITIVE"], [8, 21, "PERFORMANCE#POSITIVE"], [24, 37, "BATTERY#POSITIVE"], [41, 79, "CAMERA#POSITIVE"], [83, 107, "FEATURES#POSITIVE"], [120, 127, "GENERAL#POSITIVE"], [128, 130, "PRICE#POSITIVE"]]}}
    {{"text": "v·ª´a m·ªõi mua h√¥m qua ƒë√£ test kh√° k·ªπ pin v√† t√°c v·ª• x√†i ·ªïn, tuy nhi√™n c√≥ c√°i th·∫•y m√°y m√† h·ªôp ƒë√£ khui ra s·∫µn v·ªõi m√°y ƒë·∫ßu ti√™n nh√¢n vi√™n mang ra b·ªã tr·∫ßy camera sau ƒë·ªïi l·∫°i m√°y kh√°c th√¨ c≈©ng l√† h·ªôp ƒë√£ khui r·ªìi c·∫£m gi√°c nh∆∞ ƒëang x√†i m√°y c≈© :))c√≤n ngo√†i ra anh em n√†o c·∫ßn m√°y ch∆°i game th√¨ m√°y n√†y x√†i r·∫•t oke nh√© pin ·ªïn", "labels": [[35, 38, "BATTERY#POSITIVE"], [42, 55, "PERFORMANCE#POSITIVE"], [79, 232, "SER&ACC#NEGATIVE"], [264, 305, "PERFORMANCE#POSITIVE"], [306, 312, "BATTERY#POSITIVE"]]}}
    {{"text": "T·ª´ l√∫c m·ªõi mua, m·ªói khi s·∫°c n√≥ hi·ªán c√°i v√≤ng tr√≤n s·∫°c nhanh , s√†i ƒëc t·∫ßm 7-8 th√°ng. B√¢y gi·ªù n√≥ m·∫•t ti√™u, s·∫°c nh∆∞ s·∫°c th√¥ng th∆∞·ªùng kh√¥ng c√≤n ƒëc s·∫°c nhanh n·ªØa T·∫°i sao? Hay do n√≥ v·∫´n s·∫°c nhanh, ch·ªâ l√† m·∫•t c√°i v√≤ng tr√≤n th√¥i.", "labels": [[92, 156, "BATTERY#NEGATIVE"]]}}
    {{"text": "Mua v·ªÅ l√† v·ª´a x·∫°c v·ª´a ch∆°i lu√¥n Choi game h∆°i t·ª•t pin l∆∞·ª£t wer ok xem phim oke", "labels": [[32, 53, "BATTERY#NEGATIVE"], [54, 79, "PERFORMANCE#POSITIVE"]]}}
    {{"text": "Ban ƒë·∫ßu m·ªõi mua t·∫•t c·∫£ ƒë·ªÅu ok. Sau n√†y ch·ª•p ·∫£nh nhi·ªÅu m·ªõi ph√°t hi·ªán ra ,n·∫øu ch·ª•p ƒë·ªì ƒÉn g·∫ßn ,n√≥ ch·ªâ l·∫•y n√©t ·ªü ch√≠nh gi·ªØa. Xung quanh b·ªã m·ªù. Ch·ª•p xa th√¨ kh√¥ng sao. Kh√°c xa v·ªõi Huawei. Ch·ª•p ·∫£nh th·ª©c ƒÉn v·∫´n n√©t t·∫•t c·∫£", "labels": [[72, 160, "CAMERA#NEGATIVE"]]}}
    {{"text": "M√°y qu√° ngon ph·∫£i n√≥i l√† kho·∫ª nh·∫•t ph√¢n kh√∫c 4 c·ªß qu√° to√†n di·ªán. Pin tr√¢u. Chip kho·∫ª. X·∫°c nhanh .chi·∫øn game qu√° t·ªët n√≥i chung l√† ngon 5 *", "labels": [[0, 63, "GENERAL#POSITIVE"], [65, 73, "BATTERY#POSITIVE"], [75, 84, "PERFORMANCE#POSITIVE"], [86, 95, "BATTERY#POSITIVE"], [97, 116, "PERFORMANCE#POSITIVE"], [116, 133, "GENERAL#POSITIVE"]]}}
    {{"text": "M√¨nh th√≠ch ki·ªÉu iPhone 5s nh∆∞ng m√†n h√¨nh l·ªõn h∆°n ch√∫t th√¨ Ok, c·∫•u h√¨nh th√¨ ƒë∆∞·ª£c nh∆∞ng thi·∫øt k·∫ø kh√¥ng ƒë·∫πp b·∫±ng 5s, ƒë√≥ t·∫≠n d·ª•ng linh ki·ªán t·ª´ iPhone 8, dung l∆∞·ª£ng pin h∆°i th·∫•p nh∆∞ng ƒëi·ªÅu ƒë√≥ kh√¥ng c√≤n qu√° quan tr·ªçng khi ƒë∆∞·ª£c trang b·ªã s·∫°c nhanh", "labels": [[32, 60, "SCREEN#NEGATIVE"], [62, 79, "PERFORMANCE#POSITIVE"], [86, 112, "DESIGN#NEGATIVE"], [149, 172, "BATTERY#NEGATIVE"], [216, 239, "BATTERY#POSITIVE"]]}}
    {{"text": "M√°y x√†i r·∫•t t·ªët, ch·ª•p ·∫£nh ƒë·∫πp, ko b·ªã l·ªói l·∫ßm g√¨, thi·∫øt k·∫ø b·∫±ng k√≠nh qu√° ƒë·∫πp, v√¢n tay nh·∫°y", "labels": [[0, 15, "GENERAL#POSITIVE"], [17, 29, "CAMERA#POSITIVE"], [31, 47, "GENERAL#POSITIVE"], [49, 75, "DESIGN#POSITIVE"], [77, 89, "FEATURES#POSITIVE"]]}}
    {{"text": "Ch·ª•p c·∫≠n c·∫£nh kh√¥ng ƒë·∫πp nh∆∞ qu·∫£ng c√°o. M·ªü ch·∫ø ƒë·ªô c·∫≠n c·∫£nh l√™n l√† m√†n h√¨nh ru·ªìi kh√¥ng, ch·ª•p g·∫ßn m·ªù ch·ª© ko r√µ n√©t. Hay do m√°y m√¨nh l·ªói. S·∫°c nhanh th√¨ b·ªã n√≥ng m√°y. Khi mua th√¨ th·∫•y m√°y ƒëc d√°n m√†n h√¨nh s·∫µn r·ªìi, h·ªôp c≈©ng b·ªã r√°ch tem ni√™m phong r·ªìi nh∆∞ng nh√¢n vi√™n v·∫´n ƒë·∫£m b·∫£o l√† m√°y m·ªõi.", "labels": [[0, 111, "CAMERA#NEGATIVE"], [134, 159, "BATTERY#NEGATIVE"], [161, 281, "SER&ACC#NEGATIVE"]]}}
    {{"text": "M√°y qu√° k√©m. Ph√≠ 8 tri·ªáu. ƒêk m·ªói c√°i m√£ ngo√†i. M√°y hay lag, ƒë∆°. B·∫Øt s√≥ng k√©m. Kh√¥ng ƒë√°ng mua ch√∫t n√†o.", "labels": [[0, 11, "GENERAL#NEGATIVE"], [13, 24, "PRICE#NEGATIVE"], [26, 45, "DESIGN#POSITIVE"], [47, 62, "PERFORMANCE#POSITIVE"], [64, 76, "FEATURES#POSITIVE"], [78, 101, "GENERAL#NEGATIVE"]]}}
    {{"text": "ƒêt ch∆°i game m∆∞·ª£t,pin t·ª•t kh√° nhanh nh∆∞ng c√≥ h·ªó tr·ª£ s·∫°c nhanh n√™n kh√¥ng sao, v·ªõi t·∫ßm gi√° n√†y th√¨ Ok ! V·ªõi l·∫°i c√°ch nh√¢n vi√™n ph·ª•c v·ª• r·∫•t t·∫≠n t√¨nh ‚ù§Ô∏èKh√¥ng nh∆∞ nyc üòå", "labels": [[0, 17, "PERFORMANCE#POSITIVE"], [18, 75, "BATTERY#NEUTRAL"], [81, 99, "PRICE#POSITIVE"], [110, 144, "SER&ACC#POSITIVE"]]}}
    {{"text": "H√£ng Xiaomi n√†y.thua HAWAI nha.may Xiaomi redmi note 8pro nay mua v·ªÅ ch∆°i pubg th·ªùi Gian ƒë·∫ßu ch∆°i kho·∫£n h·∫øt 1doi 1 l√† xong nha th·ªùi gian c√≤n l·∫°i l√† ch∆°i kho·∫£n 4g l√† ƒë·∫≠p qu·∫£ tr·ª©ng g√† l√™n m√†ng h√¨nh l√† ch√≠n lu√¥n ƒë√≥ tui n√≥i kh√¥ng sai ƒë√¢u", "labels": [[148, 211, "PERFORMANCE#NEGATIVE"]]}}
    {{"text": "M√°y l√†m j c≈©ng ngon chi·∫øn game t·ªët ch·ª•p h√¨nh n√©t l∆∞u tr·ª≠ t·ªët ai th√≠ch mua h√£ng kh√°c nh∆∞ng ri√™ng t√¥i l·∫°i tin t∆∞·ªüng h√†ng Vi·ªát Nam ch·∫•t l∆∞·ª£ng cao.", "labels": [[0, 19, "GENERAL#POSITIVE"], [19, 34, "PERFORMANCE#POSITIVE"], [34, 48, "CAMERA#POSITIVE"], [48, 60, "STORAGE#POSITIVE"], [104, 142, "SER&ACC#POSITIVE"]]}}
    {{"text": "M√°y c≈©ng x√†i t·∫°m ·ªïn. M√†n h√¨nh n√≥ ko ƒë∆∞·ª£c nhay nhi·ªÅu l√∫c ph·∫£i b·∫•m v√†i l·∫ßn m·ªõi ƒë∆∞·ª£c.", "labels": [[0, 24, "GENERAL#NEUTRAL"], [26, 97, "FEATURES#NEGATIVE"]]}}
    ```
    **Your Task:**
    - Generate {num_samples} sentences or paragraphs following the above format with creative varieties.
    - Include opinions on aspects like design, screen, performance, battery, camera, features, price, and service
    - Each sentence must contain at least one aspect from the provided tag labels but should contain multiple aspects (3 or more), as many as possible.
    - Ensure the start and end positions accurately correspond to the phrases in the "text".
    - Use colloquial Vietnamese expressions. The content should be natural, can be informal or even swear, but accurately reflect the sentiment associated with each aspect.
    - Can mention real-life usage experience or comparison with other products.
    - Include occasional typos or informal spellings
    """

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "llama-3.1-70b-versatile",  # Thay th·∫ø b·∫±ng model Groq ph√π h·ª£p
        "messages": [
            {"role": "system", "content": "You are a helpful assistant that generates ABSA data in Vietnamese."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 1.0,
        "max_tokens": 5000
    }

    response = requests.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json=data)
    response_json = response.json()

    generated_data = response_json['choices'][0]['message']['content']
    
    # Parse the generated data
    data_list = []
    for line in generated_data.split('\n'):
        if line.strip().startswith('{') and line.strip().endswith('}'):
            try:
                data = json.loads(line.strip())
                data_list.append(data)
            except json.JSONDecodeError:
                print(f"Error parsing line: {line}")

    return data_list

# Example usage
tag_labels = ["BATTERY#NEGATIVE","BATTERY#NEUTRAL","BATTERY#POSITIVE","CAMERA#NEGATIVE","CAMERA#NEUTRAL","CAMERA#POSITIVE","DESIGN#NEGATIVE","DESIGN#NEUTRAL","DESIGN#POSITIVE","FEATURES#NEGATIVE","FEATURES#NEUTRAL","FEATURES#POSITIVE","GENERAL#NEGATIVE","GENERAL#NEUTRAL","GENERAL#POSITIVE","PERFORMANCE#NEGATIVE","PERFORMANCE#NEUTRAL","PERFORMANCE#POSITIVE","PRICE#NEGATIVE","PRICE#NEUTRAL","PRICE#POSITIVE","SCREEN#NEGATIVE","SCREEN#NEUTRAL","SCREEN#POSITIVE","SER&ACC#NEGATIVE","SER&ACC#NEUTRAL","SER&ACC#POSITIVE","STORAGE#NEGATIVE","STORAGE#NEUTRAL","STORAGE#POSITIVE"]
num_samples = 20

generated_data = generate_absa_data(num_samples, tag_labels)

def append_generated_data(generated_data, output_file_path):
    with open(output_file_path, 'a', encoding='utf-8') as f:
        for item in generated_data:
            # Ensure the item has the correct format
            formatted_item = {
                "text": item["text"],
                "labels": [[label[0], label[1], label[2]] for label in item["labels"]]
            }
            json_line = json.dumps(formatted_item, ensure_ascii=False)
            f.write(json_line + '\n')
    print(f"Data has been appended to {output_file_path}")

# Specify the output file path
output_file_path = 'generated_data_2.0.jsonl'

# Append the generated data
append_generated_data(generated_data, output_file_path)